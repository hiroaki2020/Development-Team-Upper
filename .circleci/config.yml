version: 2.1

anchors:
  run_on_develop_branch: &run_on_develop_branch
    filters:
      branches:
        only: develop
  run_on_release_and_hotfix_branches: &run_on_release_and_hotfix_branches
    filters:
      branches:
        only:
          - /^release-v.*/
          - /^hotfix-v.*/
  prepare_executor_and_working_dir: &prepare_executor_and_working_dir
    executor: docker_executor
    working_directory: ~/project
    
executors:
  docker_executor:
    docker:
      - image: cimg/base:2023.03
        #auth:
         #username: $DOCKERHUB_USER
         #password: $DOCKERHUB_PASSWORD

orbs:
  aws-cli: circleci/aws-cli@3.1.5
  aws-ecr: circleci/aws-ecr@8.2.1

commands:
  set_env_vars:
    description: "set env vars for containers"
    steps:
      - run:
          name: create .env and set env variables
          command: |
            echo 'DTUJ_IMAGE_NAME_PREFIX=dtuj_circleci' > ./.env
            echo 'COMPOSE_PROJECT_NAME=dtuj_circleci' >> ./.env
            echo 'DTUJ_WEB_CONTAINER_HOST_PORT=81' >> ./.env
            echo 'APP_KEY=' > ./backend/.env
            echo 'APP_ENV=testing' >> ./backend/.env
            echo 'SESSION_CONNECTION=session' >> ./backend/.env
            echo 'REDIS_HOST=kvs' >> ./backend/.env
            echo 'REDIS_PASSWORD=secret' >> ./backend/.env

workflows:
  version: 2
  local_build:
    jobs:
      - local_build:
          filters:
            branches:
              ignore: /.*/
#  test:
 #   jobs:
  #    - build_php:
   #       *run_on_develop_branch
    #  - build_nginx:
    #      *run_on_develop_branch
    #  - build_mysql:
    #      *run_on_develop_branch
    #  - build_redis:
    #      *run_on_develop_branch
    #  - tests:
    #      <<: *run_on_develop_branch
    #      requires:
    #        - build_php
    #        - build_nginx
    #        - build_mysql
    #        - build_redis

  staging:
    jobs:
      - prepare_images:
          *run_on_develop_branch
        #<<: *run_on_release_and_hotfix_branches
      - aws-ecr/build-and-push-image:
          name: push_php_image
          attach-workspace: true
          workspace-root: ./circleci-images
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-cli-version: 2.9.4
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: Dockerfile
          executor: aws-ecr/default
          extra-build-args: '--compress'
          no-output-timeout: 10m
          path: ./circleci-images
          platform: linux/amd64
          public-registry: false
          push-image: true
          region: $AWS_DEFAULT_REGION
          registry-id: AWS_ACCOUNT_ID
          repo: dtuj_app_staging
          repo-scan-on-push: true
          set-repo-policy: false
          skip-when-tags-exist: false
          source-profile: default
          tag: latest,$CIRCLE_BRANCH
          <<: *run_on_develop_branch
          #<<: *run_on_release_and_hotfix_branches
          requires:
            - prepare_images
      - aws-ecr/build-and-push-image:
          name: push_nginx_image
          attach-workspace: true
          workspace-root: ./circleci-images
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-cli-version: 2.9.4
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: Dockerfile
          executor: aws-ecr/default
          extra-build-args: '--compress'
          no-output-timeout: 10m
          path: ./circleci-images
          platform: linux/amd64
          public-registry: false
          push-image: true
          region: $AWS_DEFAULT_REGION
          registry-id: AWS_ACCOUNT_ID
          repo: dtuj_app_staging
          repo-scan-on-push: true
          set-repo-policy: false
          skip-when-tags-exist: false
          source-profile: default
          tag: latest,$CIRCLE_BRANCH
          <<: *run_on_develop_branch
          #<<: *run_on_release_and_hotfix_branches
          requires:
            - prepare_images
      - aws-ecr/build-and-push-image:
          name: push_mysql_image
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-cli-version: 2.9.4
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: Dockerfile
          executor: aws-ecr/default
          extra-build-args: '--compress'
          no-output-timeout: 10m
          path: ./infra/docker/mysql
          platform: linux/amd64
          public-registry: false
          push-image: true
          region: $AWS_DEFAULT_REGION
          registry-id: AWS_ACCOUNT_ID
          repo: dtuj_app_staging
          repo-scan-on-push: true
          set-repo-policy: false
          skip-when-tags-exist: false
          source-profile: default
          tag: latest,$CIRCLE_BRANCH
          <<: *run_on_develop_branch
          #<<: *run_on_release_and_hotfix_branches
      - aws-ecr/build-and-push-image:
          name: push_redis_image
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-cli-version: 2.9.4
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: Dockerfile
          executor: aws-ecr/default
          extra-build-args: '--compress'
          no-output-timeout: 10m
          path: ./infra/docker/redis
          platform: linux/amd64
          public-registry: false
          push-image: true
          region: $AWS_DEFAULT_REGION
          registry-id: AWS_ACCOUNT_ID
          repo: dtuj_app_staging
          repo-scan-on-push: true
          set-repo-policy: false
          skip-when-tags-exist: false
          source-profile: default
          tag: latest,$CIRCLE_BRANCH
          <<: *run_on_develop_branch
          #<<: *run_on_release_and_hotfix_branches
      - aws-ecr/build-and-push-image:
          name: push_xtrabackup_image
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-cli-version: 2.9.4
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: Dockerfile
          executor: aws-ecr/default
          extra-build-args: '--compress'
          no-output-timeout: 10m
          path: ./infra/docker/xtrabackup
          platform: linux/amd64
          public-registry: false
          push-image: true
          region: $AWS_DEFAULT_REGION
          registry-id: AWS_ACCOUNT_ID
          repo: dtuj_app_staging
          repo-scan-on-push: true
          set-repo-policy: false
          skip-when-tags-exist: false
          source-profile: default
          tag: latest,$CIRCLE_BRANCH
          <<: *run_on_develop_branch
          #<<: *run_on_release_and_hotfix_branches
      #- deploy_to_staging:
       #   <<: *run_on_release_and_hotfix_branches
        #  requires:
         #   - push_php_image
          #  - push_nginx_image
           # - push_mysql_image
           # - push_redis_image
           # - push_xtrabackup_image
  #production:
   # jobs:
      #- deploy_to_production:
       #   filters:
        #    branches:
         #     ignore: /.*/
            #tags:
              #only: /^v.*/

jobs:
  local_build:
    executor: docker_executor
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: false
      - run:
          name: change docker and docker-compose commands' permissions
          command: |
            sudo chmod u+s /usr/bin/docker
            sudo chmod u+s /usr/local/bin/docker-compose
      - run:
          name: create .env and set env variables
          command: |
            echo 'DTUJ_IMAGE_NAME_PREFIX=dtuj_circleci' > ./.env
            echo 'COMPOSE_PROJECT_NAME=dtuj_circleci' >> ./.env
            echo 'DTUJ_WEB_CONTAINER_HOST_PORT=81' >> ./.env
            echo 'APP_KEY=' > ./backend/.env
            echo 'APP_ENV=testing' >> ./backend/.env
            echo 'SESSION_CONNECTION=session' >> ./backend/.env
            echo 'REDIS_HOST=kvs' >> ./backend/.env
            echo 'REDIS_PASSWORD=secret' >> ./backend/.env
      - run:
          name: build images
          command: docker-compose build --no-cache --force-rm
      - run:
          name: disable bind mount in docker-compose file
          command: sed -i -e '/^volumes:/a\  app-bind-mount-dir:' -e '/- \.\/backend:\/work\/backend/s/\.\/backend/app-bind-mount-dir/g' docker-compose.yml
      - run:
          name: spin up containers
          command: docker-compose up -d
      - run:
          name: copy data from host to container
          command: docker cp ./backend/. dtuj_circleci-app-1:/work/backend
      - run:
          name: chown backend dir
          command: docker-compose exec --user root app chown -R dtuj:dtuj /work/backend
      - run:
          name: install composer packages
          command: docker-compose exec app composer install --no-scripts --no-plugins
      - run:
          name: wait until db container is ready
          command: | 
            until docker-compose exec db [ -f /var/lib/mysql-files/mysql-init-complete ] && docker-compose exec db mysqladmin -s ping
            do
              sleep 1
            done
      - run:
          name: test migration
          command: docker-compose exec app php artisan migrate
      - run:
          name: test rollback and migrate with seeding
          command: docker-compose exec app php artisan migrate:refresh --seed
      - run:
          name: generate application key for testing codes
          command: docker-compose exec app php artisan key:generate
      - run:
          name: test codes
          command: docker-compose exec app php artisan test
      - run:
          name: stop containers
          command: docker-compose down

  build_php:
    <<: *prepare_executor_and_working_dir
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
          docker_layer_caching: true
      - set_env_vars
      - restore_cache:
          key: v1-docker-images-{{ checksum "docker-compose.yml" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "infra/docker/php/Dockerfile" }}-{{ checksum "infra/docker/php/php.ini" }}-{{ checksum "infra/docker/php/php-fpm.d/zzz-www.conf" }}
      - run:
          name: load an image from .tar file if cache exists
          command: |
            if [[ -e ./circleci-cache/php-image.tar ]]; then
              docker load -i ./circleci-cache/php-image.tar
            fi
      - run:
          name: build and save an image if cache does not exist
          command: |
            if ! [[ -e ./circleci-cache/php-image.tar ]]; then
              docker-compose build app --no-cache
              mkdir circleci-cache
              docker save -o ./circleci-cache/php-image.tar dtuj_circleci_app
            fi                  
      - save_cache:
          key: v1-docker-images-{{ checksum "docker-compose.yml" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "infra/docker/php/Dockerfile" }}-{{ checksum "infra/docker/php/php.ini" }}-{{ checksum "infra/docker/php/php-fpm.d/zzz-www.conf" }}
          paths:
            - ./circleci-cache/php-image.tar
      - persist_to_workspace:
          root: ./circleci-cache
          paths:
            - php-image.tar

  build_nginx:
    executor: docker_executor
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
          docker_layer_caching: true
      - set_env_vars
      - restore_cache:
          key: v1-docker-images-{{ checksum "docker-compose.yml" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "infra/docker/nginx/Dockerfile" }}-{{ checksum "infra/docker/nginx/default.conf.template" }}
      - run:
          name: load an image from .tar file if cache exists
          command: |
            if [[ -e ./circleci-cache/nginx-image.tar ]]; then
              docker load -i ./circleci-cache/nginx-image.tar
            fi
      - run:
          name: build and save an image if cache does not exist
          command: |
            if ! [[ -e ./circleci-cache/nginx-image.tar ]]; then
              docker-compose build web --no-cache
              mkdir circleci-cache
              docker save -o ./circleci-cache/nginx-image.tar dtuj_circleci_web
            fi                  
      - save_cache:
          key: v1-docker-images-{{ checksum "docker-compose.yml" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "infra/docker/nginx/Dockerfile" }}-{{ checksum "infra/docker/nginx/default.conf.template" }}
          paths:
            - ./circleci-cache/nginx-image.tar
      - persist_to_workspace:
          root: ./circleci-cache
          paths:
            - nginx-image.tar
  
  build_mysql:
    executor: docker_executor
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
          docker_layer_caching: true
      - set_env_vars
      - restore_cache:
          key: v1-docker-images-{{ checksum "docker-compose.yml" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "infra/docker/mysql/Dockerfile" }}-{{ checksum "infra/docker/mysql/0hourly" }}-{{ checksum "infra/docker/mysql/cron.allow" }}-{{ checksum "infra/docker/mysql/dailyjobs" }}-{{ checksum "infra/docker/mysql/docker-entrypoint-wrapper.sh" }}-{{ checksum "infra/docker/mysql/logrotate.conf" }}-{{ checksum "infra/docker/mysql/my.cnf" }}
      - run:
          name: load an image from .tar file if cache exists
          command: |
            if [[ -e ./circleci-cache/mysql-image.tar ]]; then
              docker load -i ./circleci-cache/mysql-image.tar
            fi
      - run:
          name: build and save an image if cache does not exist
          command: |
            if ! [[ -e ./circleci-cache/mysql-image.tar ]]; then
              docker-compose build db --no-cache
              mkdir circleci-cache
              docker save -o ./circleci-cache/mysql-image.tar dtuj_circleci_db
            fi                  
      - save_cache:
          key: v1-docker-images-{{ checksum "docker-compose.yml" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "infra/docker/mysql/Dockerfile" }}-{{ checksum "infra/docker/mysql/0hourly" }}-{{ checksum "infra/docker/mysql/cron.allow" }}-{{ checksum "infra/docker/mysql/dailyjobs" }}-{{ checksum "infra/docker/mysql/docker-entrypoint-wrapper.sh" }}-{{ checksum "infra/docker/mysql/logrotate.conf" }}-{{ checksum "infra/docker/mysql/my.cnf" }}
          paths:
            - ./circleci-cache/mysql-image.tar
      - persist_to_workspace:
          root: ./circleci-cache
          paths:
            - mysql-image.tar
          
  build_redis:
    executor: docker_executor
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
          docker_layer_caching: true
      - set_env_vars
      - restore_cache:
          key: v1-docker-images-{{ checksum "docker-compose.yml" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "infra/docker/redis/Dockerfile" }}-{{ checksum "infra/docker/redis/redis.conf" }}
      - run:
          name: load an image from .tar file if cache exists
          command: |
            if [[ -e ./circleci-cache/redis-image.tar ]]; then
              docker load -i ./circleci-cache/redis-image.tar
            fi
      - run:
          name: build and save an image if cache does not exist
          command: |
            if ! [[ -e ./circleci-cache/redis-image.tar ]]; then
              docker-compose build kvs --no-cache
              mkdir circleci-cache
              docker save -o ./circleci-cache/redis-image.tar dtuj_circleci_kvs
            fi                  
      - save_cache:
          key: v1-docker-images-{{ checksum "docker-compose.yml" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "infra/docker/redis/Dockerfile" }}-{{ checksum "infra/docker/redis/redis.conf" }}
          paths:
            - ./circleci-cache/redis-image.tar
      - persist_to_workspace:
          root: ./circleci-cache
          paths:
            - redis-image.tar
      
  tests:
    executor: docker_executor
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
          docker_layer_caching: true
      - set_env_vars
      - attach_workspace:
          at: ./circleci-cache
      - run:
          name: load images from image .tar files
          command: |
            docker load -i ./circleci-cache/php-image.tar
            docker load -i ./circleci-cache/nginx-image.tar
            docker load -i ./circleci-cache/mysql-image.tar
            docker load -i ./circleci-cache/redis-image.tar
      - run:
          name: disable bind mount in docker-compose file
          command: sed -i -e '/^volumes:/a\  app-bind-mount-dir:' -e '/- \.\/backend:\/work\/backend/s/\.\/backend/app-bind-mount-dir/g' docker-compose.yml
      - run:
          name: spin up containers
          command: docker-compose up -d
      - run:
          name: copy data from host to container
          command: docker cp ./backend/. dtuj_circleci-app-1:/work/backend
      - run:
          name: chown backend dir
          command: docker-compose exec --user root app chown -R dtuj:dtuj /work/backend
      - run:
          name: install composer packages
          command: docker-compose exec app composer install --no-scripts --no-plugins
      - run:
          name: wait until db container is ready
          command: | 
            until docker-compose exec db [ -f /var/lib/mysql-files/mysql-init-complete ] && docker-compose exec db mysqladmin -s ping
            do
              sleep 1
            done
      - run:
          name: test migration
          command: docker-compose exec app php artisan migrate
      - run:
          name: test rollback and migrate with seeding
          command: docker-compose exec app php artisan migrate:refresh --seed
      - run:
          name: generate application key for testing codes
          command: docker-compose exec app php artisan key:generate
      - run:
          name: test codes
          command: docker-compose exec app php artisan test
      - run:
          name: stop containers
          command: docker-compose down

  prepare_images:
    executor: docker_executor
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
          docker_layer_caching: true
      - run:
          name: include repo to app and web server images for staging and production env
          command: |
            sed -i -e '/^# This is the line/s/# This is the line to copy repo into this image for staging and production images/COPY \.\/project\/backend \/work\/backend/' ./infra/docker/php/Dockerfile
            sed -i -e '/^# This is the line/s/# This is the line to copy repo into this image for staging and production images/COPY \.\/project\/backend \/work\/backend/' ./infra/docker/nginx/Dockerfile
      - persist_to_workspace:
          root: ./infra/docker/php
          paths:
            - Dockerfile
      - persist_to_workspace:
          root: ./infra/docker/nginx
          paths:
            - Dockerfile
  
  #deploy_to_staging:
   # executor: aws-cli/default
    #steps:
     # - checkout
      #- aws-cli/setup:
      #- run:
       #   name: deploy cloudformation stack to staging env
        #  command: |
         #   aws cloudformation deploy \
          #  --template-file dtuj-cloudformation-stack.yaml \
           # --stack-name DTUJ-Staging

