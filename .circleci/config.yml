version: 2
jobs:
  build:
    docker:
      - image: cimg/base:2021.04
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: false
      - run:
          name: change docker and docker-compose commands' permissions if circleci runs locally
          command: |
            if [[ "$CIRCLE_SHELL_ENV" =~ .*localbuild.* ]]; then
              sudo usermod -aG docker circleci
              #sudo chmod u+s /usr/bin/docker
              #sudo chmod u+s /usr/local/bin/docker-compose
              # consider 2 lines above can be replaced by adding user to docker group
            fi
      - run:
          name: create .env and set env variables
          command: |
            echo 'DTUJ_IMAGE_NAME_PREFIX="dtuj_circleci"' > ./.env
            echo 'COMPOSE_PROJECT_NAME="dtuj_circleci"' >> ./.env
      - restore_cache:
          key: v1-docker-images-{{ checksum "docker-compose.yml" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "infra/docker/php/Dockerfile" }}-{{ checksum "infra/docker/php/php.ini" }}-{{ checksum "infra/docker/php/php-fpm.d/zzz-www.conf" }}-{{ checksum "infra/docker/nginx/Dockerfile" }}-{{ checksum "infra/docker/nginx/default.conf.template" }}-{{ checksum "infra/docker/mysql/Dockerfile" }}-{{ checksum "infra/docker/mysql/my.cnf" }}-{{ checksum "infra/docker/mysql/docker-entrypoint-wrapper.sh" }}-{{ checksum "infra/docker/mysql/change-socket-permission.sh" }}-{{ checksum "infra/docker/mysql/cron.allow" }}-{{ checksum "infra/docker/mysql/logrotate.conf" }}-{{ checksum "infra/docker/mysql/0hourly" }}-{{ checksum "infra/docker/mysql/dailyjobs" }}
      - run:
          name: load images from cache if it exists, build ones if not
          command: | 
            if [[ -f ./circleci-cache/docker-images.tar ]]; then
              docker load -i ./circleci-cache/docker-images.tar
            elif [[ "$CIRCLE_SHELL_ENV" =~ .*localbuild.* ]]; then
              docker-compose build --no-cache --force-rm
            else
              docker-compose build --no-cache
              mkdir circleci-cache
              docker save -o ./circleci-cache/docker-images.tar dtuj_circleci_app dtuj_circleci_web dtuj_circleci_db
            fi
      - save_cache:
          key: v1-docker-images-{{ checksum "docker-compose.yml" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "infra/docker/php/Dockerfile" }}-{{ checksum "infra/docker/php/php.ini" }}-{{ checksum "infra/docker/php/php-fpm.d/zzz-www.conf" }}-{{ checksum "infra/docker/nginx/Dockerfile" }}-{{ checksum "infra/docker/nginx/default.conf.template" }}-{{ checksum "infra/docker/mysql/Dockerfile" }}-{{ checksum "infra/docker/mysql/my.cnf" }}-{{ checksum "infra/docker/mysql/docker-entrypoint-wrapper.sh" }}-{{ checksum "infra/docker/mysql/change-socket-permission.sh" }}-{{ checksum "infra/docker/mysql/cron.allow" }}-{{ checksum "infra/docker/mysql/logrotate.conf" }}-{{ checksum "infra/docker/mysql/0hourly" }}-{{ checksum "infra/docker/mysql/dailyjobs" }}
          paths:
            - ./circleci-cache/docker-images.tar
      - run:
          name: spin up containers
          command: docker-compose up -d
      - run:
          name: wait until db container is ready
          command: | 
            until docker-compose exec db mysqladmin -s ping
            do
              sleep 1
            done
            while docker-compose exec db mysqladmin -s ping
            do
              sleep 1
            done
            until docker-compose exec db mysqladmin -s ping
            do
              sleep 1
            done
      - run:
          name: create .env.testing file for testing codes
          command: echo "APP_KEY=" > ./backend/.env.testing
      - run:
          name: chown copied dir to dtuj
          command: |
            sudo groupadd --system --gid 555 dtuj
            sudo useradd --system -g dtuj --no-create-home --home-dir /nonexistent --comment dtuj --shell /bin/false --uid 555 dtuj
            sudo chown dtuj:dtuj ./backend
      - run:
          name: copy data from host to container
          command: docker cp -a ./backend/. dtuj_circleci_app_1:/work/backend
      - run:
          name: just a test
          command: docker-compose exec app ls -al /work/backend
      - run:
          name: install composer
          command: docker-compose exec app composer install
      - run:
          name: test migration
          command: docker-compose exec app php artisan migrate
      - run:
          name: test rollback and migrate with seeding
          command: docker-compose exec app php artisan migrate:refresh --seed
      - run:
          name: generate application key for testing codes
          command: docker-compose exec app php artisan key:generate
      - run:
          name: test codes
          command: docker-compose exec app php artisan test
      - run:
          name: stop containers
          command: docker-compose down