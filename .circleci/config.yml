version: 2.1

references:
  include_develop_branch: &include_develop_branch
    filters:
      branches:
        only: develop

executors:
  docker_executor:
    docker:
      - image: cimg/base:2023.03
        #auth:
         #username: $DOCKERHUB_USER
         #password: $DOCKERHUB_PASSWORD

#orbs:

#commands:

workflows:
  version: 2
  local_build:
    jobs:
      - local_build:
          filters:
            branches:
              ignore: /.*/
  test:
    jobs:
      - build_php:
          *include_develop_branch
     # - build_nginx:
      #    *include_develop_branch
      #- build_mysql:
       #   *include_develop_branch
      #- build_redis:
       #   *include_develop_branch
      - tests:
          <<: *include_develop_branch
          requires:
            - build_php
            #- build_nginx
            #- build_mysql
            #- build_redis

  #staging:
   # jobs:
      #- deploy_to_staging:
       #   filters:
        #    branches:
         #     only:
              #  - /^release-v.*/
               # - /^hotfix-.*/
  #production:
   # jobs:
      #- deploy_to_production:
       #   filters:
        #    branches:
         #     only: master

jobs:
  local_build:
    executor: docker_executor
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: false
      - run:
          name: change docker and docker-compose commands' permissions
          command: |
            sudo chmod u+s /usr/bin/docker
            sudo chmod u+s /usr/local/bin/docker-compose
      - run:
          name: create .env and set env variables
          command: |
            echo 'DTUJ_IMAGE_NAME_PREFIX=dtuj_circleci' > ./.env
            echo 'COMPOSE_PROJECT_NAME=dtuj_circleci' >> ./.env
            echo 'DTUJ_WEB_CONTAINER_HOST_PORT=81' >> ./.env
            echo 'APP_KEY=' > ./backend/.env
            echo 'APP_ENV=testing' >> ./backend/.env
            echo 'SESSION_CONNECTION=session' >> ./backend/.env
            echo 'REDIS_HOST=kvs' >> ./backend/.env
            echo 'REDIS_PASSWORD=secret' >> ./backend/.env
      - run:
          name: build images
          command: docker-compose build --no-cache --force-rm
      - run:
          name: disable bind mount in docker-compose file
          command: sed -i -e '/^volumes:/a\  app-bind-mount-dir:' -e '/- \.\/backend:\/work\/backend/s/\.\/backend/app-bind-mount-dir/g' docker-compose.yml
      - run:
          name: spin up containers
          command: docker-compose up -d
      - run:
          name: copy data from host to container
          command: |
            docker cp ./backend/. dtuj_circleci-app-1:/work/backend
            docker cp ./backend/. dtuj_circleci-app-queue-worker-1:/work/backend
            docker cp ./backend/. dtuj_circleci-web-1:/work/backend
      - run:
          name: chown backend dir
          command: docker-compose exec --user root app chown -R dtuj:dtuj /work/backend
      - run:
          name: install composer packages
          command: docker-compose exec app composer install --no-scripts --no-plugins
      - run:
          name: wait until db container is ready
          command: | 
            until docker-compose exec db [ -f /var/lib/mysql-files/mysql-init-complete ] && docker-compose exec db mysqladmin -s ping
            do
              sleep 1
            done
      - run:
          name: test migration
          command: docker-compose exec app php artisan migrate
      - run:
          name: test rollback and migrate with seeding
          command: docker-compose exec app php artisan migrate:refresh --seed
      - run:
          name: generate application key for testing codes
          command: docker-compose exec app php artisan key:generate
      - run:
          name: test codes
          command: docker-compose exec app php artisan test
      - run:
          name: stop containers
          command: docker-compose down

  build_php:
    executor: docker_executor
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
          docker_layer_caching: true
      - run:
          name: create .env and set env variables
          command: |
            echo 'DTUJ_IMAGE_NAME_PREFIX=dtuj_circleci' > ./.env
            echo 'COMPOSE_PROJECT_NAME=dtuj_circleci' >> ./.env
            echo 'DTUJ_WEB_CONTAINER_HOST_PORT=81' >> ./.env
            echo 'APP_KEY=' > ./backend/.env
            echo 'APP_ENV=testing' >> ./backend/.env
            echo 'SESSION_CONNECTION=session' >> ./backend/.env
            echo 'REDIS_HOST=kvs' >> ./backend/.env
            echo 'REDIS_PASSWORD=secret' >> ./backend/.env
      - restore_cache:
          key: v1-docker-images-{{ checksum "docker-compose.yml" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "infra/docker/php/Dockerfile" }}-{{ checksum "infra/docker/php/php.ini" }}-{{ checksum "infra/docker/php/php-fpm.d/zzz-www.conf" }}
      - run:
          name: load an image from .tar file if cache exists
          command: |
            if [[ -e ./circleci-cache/php-image.tar ]]; then
              docker load -i ./circleci-cache/php-image.tar
            fi
      - run:
          name: build and save an image if cache does not exist
          command: |
            if ![[ -e ./circleci-cache/php-image.tar ]]; then
              docker-compose build app --no-cache
              mkdir circleci-cache
              docker save -o ./circleci-cache/php-image.tar dtuj_circleci_app
            fi                  
      - save_cache:
          key: v1-docker-images-{{ checksum "docker-compose.yml" }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "infra/docker/php/Dockerfile" }}-{{ checksum "infra/docker/php/php.ini" }}-{{ checksum "infra/docker/php/php-fpm.d/zzz-www.conf" }}
          paths:
            - ./circleci-cache/php-image.tar
      - persist_to_workspace:
          root: ./circleci-cache
          paths:
            - php-image.tar
      
  tests:
    executor: docker_executor
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
          docker_layer_caching: true
      - attach_workspace:
          at: ./circleci-cache
      - run:
          name: just a test
          command: ls -al ./circleci-cache
      
      
      
      
      
  build_nginx:
    executor: docker_executor
    working_directory: ~/project
    steps:
      - run:
          name: disable bind mount in docker-compose file
          command: sed -i -e '/^volumes:/a\  app-bind-mount-dir:' -e '/- \.\/backend:\/work\/backend/s/\.\/backend/app-bind-mount-dir/g' docker-compose.yml
      - run:
          name: spin up containers
          command: docker-compose up -d
      - run:
          name: copy data from host to container
          command: docker cp ./backend/. dtuj_circleci_app_1:/work/backend
      - run:
          name: chown backend dir
          command: docker-compose exec --user root app chown -R dtuj:dtuj /work/backend
      - run:
          name: install composer packages
          command: docker-compose exec app composer install --no-scripts --no-plugins
      - run:
          name: wait until db container is ready
          command: | 
            until docker-compose exec db [ -f /var/lib/mysql-files/mysql-init-complete ] && docker-compose exec db mysqladmin -s ping
            do
              sleep 1
            done
      - run:
          name: test migration
          command: docker-compose exec app php artisan migrate
      - run:
          name: test rollback and migrate with seeding
          command: docker-compose exec app php artisan migrate:refresh --seed
      - run:
          name: generate application key for testing codes
          command: docker-compose exec app php artisan key:generate
      - run:
          name: test codes
          command: docker-compose exec app php artisan test
      - run:
          name: stop containers
          command: docker-compose down

  