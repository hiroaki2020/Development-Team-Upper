apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: app-pv
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: local-storage
  local:
    path: ${DTUJ_K8S_LOCAL_APP_PATH}
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - docker-desktop
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-pvc
spec:
  resources:
    requests:
      storage: 8Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  storageClassName: local-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
spec:
  selector:
    matchLabels:
      service: app
  replicas: 2
  template:
    metadata:
      labels:
        service: app
    spec:
      containers:
      - name: app
        image: dtuj_app
        imagePullPolicy: Never
        resources:
          limits:
            memory: "512Mi"
            cpu: "1000m"
          requests:
            memory: "128Mi"
            cpu: "10m"
        ports:
        - containerPort: 9000
        volumeMounts:
          - mountPath: /work/backend
            name: app
      volumes:
        - name: app
          persistentVolumeClaim:
            claimName: app-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: app
  labels:
    service: app
spec:
  selector:
    service: app
  ports:
  - port: 9000
    targetPort: 9000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  selector:
    matchLabels:
      service: web
  replicas: 2
  template:
    metadata:
      labels:
        service: web
    spec:
      containers:
      - name: web
        image: dtuj_web
        imagePullPolicy: Never
        resources:
          limits:
            memory: "512Mi"
            cpu: "1000m"
          requests:
            memory: "128Mi"
            cpu: "10m"
        ports:
        - containerPort: 8080
        env:
        - name: NGINX_PORT
          value: "8080"
        volumeMounts:
          - mountPath: /work/backend
            name: app
      volumes:
        - name: app
          persistentVolumeClaim:
            claimName: app-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: web
  labels:
    service: web
spec:
  type: NodePort
  selector:
    service: web
  ports:
  - port: 80
    targetPort: 8080
    nodePort: 30080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
spec:
  selector:
    matchLabels:
      service: db
  replicas: 2
  template:
    metadata:
      labels:
        service: db
    spec:
      containers:
      - name: db
        image: dtuj_db
        imagePullPolicy: Never
        resources:
          limits:
            memory: "512Mi"
            cpu: "1000m"
          requests:
            memory: "128Mi"
            cpu: "10m"
        ports:
        - containerPort: 3306
        volumeMounts:
          - mountPath: /var/lib/mysql
            name: mysql-data-store
      volumes:
        - name: mysql-data-store
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    service: db
spec:
  selector:
    service: db
  ports:
  - port: 3306
    targetPort: 3306
